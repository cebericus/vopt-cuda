	.version 1.4
	.target sm_10, map_f64_to_f32
	// compiled with /pkgs/nvidia-cuda/4.1/cuda/open64/lib//be
	// nvopencc 4.1 built on 2012-01-12

	//-----------------------------------------------------------
	// Compiling /tmp/tmpxft_00004f75_00000000-9_gol_opt0b.cpp3.i (/tmp/ccBI#.49tGzq)
	//-----------------------------------------------------------

	//-----------------------------------------------------------
	// Options:
	//-----------------------------------------------------------
	//  Target:ptx, ISA:sm_10, Endian:little, Pointer Size:64
	//  -O3	(Optimization level)
	//  -g0	(Debug level)
	//  -m2	(Report advisories)
	//-----------------------------------------------------------

	.file	1	"<command-line>"
	.file	2	"/tmp/tmpxft_00004f75_00000000-8_gol_opt0b.cudafe2.gpu"
	.file	3	"/usr/lib/x86_64-linux-gnu/gcc/x86_64-linux-gnu/4.5.2/include/stddef.h"
	.file	4	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/crt/device_runtime.h"
	.file	5	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/host_defines.h"
	.file	6	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/builtin_types.h"
	.file	7	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/device_types.h"
	.file	8	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/driver_types.h"
	.file	9	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/surface_types.h"
	.file	10	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/texture_types.h"
	.file	11	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/vector_types.h"
	.file	12	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/device_launch_parameters.h"
	.file	13	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/crt/storage_class.h"
	.file	14	"gol_opt0b.cu"
	.file	15	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/common_functions.h"
	.file	16	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/math_functions.h"
	.file	17	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/math_constants.h"
	.file	18	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/device_functions.h"
	.file	19	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/sm_11_atomic_functions.h"
	.file	20	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/sm_12_atomic_functions.h"
	.file	21	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/sm_13_double_functions.h"
	.file	22	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/sm_20_atomic_functions.h"
	.file	23	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/sm_20_intrinsics.h"
	.file	24	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/surface_functions.h"
	.file	25	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/texture_fetch_functions.h"
	.file	26	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/math_functions_dbl_ptx1.h"


	.entry step (
		.param .u64 __cudaparm_step_current,
		.param .u64 __cudaparm_step_next)
	{
	.reg .u16 %rh<7>;
	.reg .u32 %r<142>;
	.reg .u64 %rd<23>;
	.reg .pred %p<5>;
	.loc	14	20	0
 //  16  const dim3 gridDim(8, 8, 1);
 //  17  const dim3 blocksDim(16, 16, 1); // 256 threads per block
 //  18  
 //  19  
 //  20  extern "C" __global__ void step (const unsigned char *current, unsigned char *next) {
$LDWbegin_step:
	.loc	14	28	0
 //  24  
 //  25      // offset index, neighbor coordinates, alive neighbor count
 //  26      int i, nx, ny, num_neighbors;
 //  27      
 //  28      const int offsets[8][2] = {{-1, 1},{0, 1},{1, 1},
	mov.s32 	%r1, -1;
	mov.s32 	%r2, %r1;
	mov.s32 	%r3, 1;
	mov.s32 	%r4, %r3;
	mov.s32 	%r5, 0;
	mov.s32 	%r6, %r5;
	mov.s32 	%r7, 1;
	mov.s32 	%r8, %r7;
	mov.s32 	%r9, 1;
	mov.s32 	%r10, %r9;
	mov.s32 	%r11, 1;
	mov.s32 	%r12, %r11;
	mov.s32 	%r13, -1;
	mov.s32 	%r14, %r13;
	mov.s32 	%r15, 0;
	mov.s32 	%r16, %r15;
	mov.s32 	%r17, 1;
	mov.s32 	%r18, %r17;
	mov.s32 	%r19, 0;
	mov.s32 	%r20, %r19;
	mov.s32 	%r21, -1;
	mov.s32 	%r22, %r21;
	mov.s32 	%r23, -1;
	mov.s32 	%r24, %r23;
	mov.s32 	%r25, 0;
	mov.s32 	%r26, %r25;
	mov.s32 	%r27, -1;
	mov.s32 	%r28, %r27;
	mov.s32 	%r29, 1;
	mov.s32 	%r30, %r29;
	.loc	14	40	0
 //  36          // wrap neighbor coordinates around to the other side of the
 //  37          // board if they fall off.
 //  38          nx = (x + offsets[i][0] + WIDTH) % WIDTH;
 //  39          ny = (y + offsets[i][1] + HEIGHT) % HEIGHT;
 //  40          num_neighbors += current[ny * WIDTH + nx]==1;
	mov.u16 	%rh1, %ctaid.y;
	mov.u16 	%rh2, %ntid.y;
	mul.wide.u16 	%r31, %rh1, %rh2;
	mov.u16 	%rh3, %ctaid.x;
	mov.u16 	%rh4, %ntid.x;
	mul.wide.u16 	%r32, %rh3, %rh4;
	cvt.u32.u16 	%r33, %tid.y;
	add.u32 	%r34, %r33, %r31;
	cvt.u32.u16 	%r35, %tid.x;
	add.u32 	%r36, %r35, %r32;
	add.s32 	%r37, %r34, 1025;
	add.s32 	%r38, %r36, 1025;
	add.s32 	%r39, %r36, 1023;
	add.s32 	%r40, %r36, 1024;
	shr.s32 	%r41, %r37, 31;
	mov.s32 	%r42, 1023;
	and.b32 	%r43, %r41, %r42;
	add.s32 	%r44, %r43, %r37;
	shr.s32 	%r45, %r44, 10;
	mul.lo.s32 	%r46, %r45, 1024;
	sub.s32 	%r47, %r37, %r46;
	shr.s32 	%r48, %r38, 31;
	mov.s32 	%r49, 1023;
	and.b32 	%r50, %r48, %r49;
	add.s32 	%r51, %r50, %r38;
	shr.s32 	%r52, %r51, 10;
	mul.lo.s32 	%r53, %r52, 1024;
	sub.s32 	%r54, %r38, %r53;
	shr.s32 	%r55, %r39, 31;
	mov.s32 	%r56, 1023;
	and.b32 	%r57, %r55, %r56;
	add.s32 	%r58, %r57, %r39;
	shr.s32 	%r59, %r58, 10;
	mul.lo.s32 	%r60, %r59, 1024;
	sub.s32 	%r61, %r39, %r60;
	shr.s32 	%r62, %r40, 31;
	mov.s32 	%r63, 1023;
	and.b32 	%r64, %r62, %r63;
	add.s32 	%r65, %r64, %r40;
	shr.s32 	%r66, %r65, 10;
	mul.lo.s32 	%r67, %r66, 1024;
	sub.s32 	%r68, %r40, %r67;
	mul.lo.s32 	%r69, %r47, 1024;
	ld.param.u64 	%rd1, [__cudaparm_step_current];
	add.s32 	%r70, %r54, %r69;
	cvt.u64.s32 	%rd2, %r70;
	add.u64 	%rd3, %rd2, %rd1;
	ld.global.u8 	%r71, [%rd3+0];
	mov.u32 	%r72, 1;
	set.eq.u32.u32 	%r73, %r71, %r72;
	neg.s32 	%r74, %r73;
	add.s32 	%r75, %r61, %r69;
	cvt.u64.s32 	%rd4, %r75;
	add.u64 	%rd5, %rd4, %rd1;
	ld.global.u8 	%r76, [%rd5+0];
	mov.u32 	%r77, 1;
	set.eq.u32.u32 	%r78, %r76, %r77;
	neg.s32 	%r79, %r78;
	add.s32 	%r80, %r68, %r69;
	cvt.u64.s32 	%rd6, %r80;
	add.u64 	%rd7, %rd6, %rd1;
	ld.global.u8 	%r81, [%rd7+0];
	mov.u32 	%r82, 1;
	set.eq.u32.u32 	%r83, %r81, %r82;
	neg.s32 	%r84, %r83;
	add.s32 	%r85, %r79, %r84;
	add.s32 	%r86, %r74, %r85;
	add.s32 	%r87, %r34, 1024;
	shr.s32 	%r88, %r87, 31;
	mov.s32 	%r89, 1023;
	and.b32 	%r90, %r88, %r89;
	add.s32 	%r91, %r90, %r87;
	shr.s32 	%r92, %r91, 10;
	mul.lo.s32 	%r93, %r92, 1024;
	sub.s32 	%r94, %r87, %r93;
	mul.lo.s32 	%r95, %r94, 1024;
	add.s32 	%r96, %r61, %r95;
	cvt.u64.s32 	%rd8, %r96;
	add.u64 	%rd9, %rd8, %rd1;
	ld.global.u8 	%r97, [%rd9+0];
	mov.u32 	%r98, 1;
	set.eq.u32.u32 	%r99, %r97, %r98;
	neg.s32 	%r100, %r99;
	add.s32 	%r101, %r86, %r100;
	add.s32 	%r102, %r54, %r95;
	cvt.u64.s32 	%rd10, %r102;
	add.u64 	%rd11, %rd10, %rd1;
	ld.global.u8 	%r103, [%rd11+0];
	mov.u32 	%r104, 1;
	set.eq.u32.u32 	%r105, %r103, %r104;
	neg.s32 	%r106, %r105;
	add.s32 	%r107, %r101, %r106;
	add.s32 	%r108, %r34, 1023;
	shr.s32 	%r109, %r108, 31;
	mov.s32 	%r110, 1023;
	and.b32 	%r111, %r109, %r110;
	add.s32 	%r112, %r111, %r108;
	shr.s32 	%r113, %r112, 10;
	mul.lo.s32 	%r114, %r113, 1024;
	sub.s32 	%r115, %r108, %r114;
	mul.lo.s32 	%r116, %r115, 1024;
	add.s32 	%r117, %r61, %r116;
	cvt.u64.s32 	%rd12, %r117;
	add.u64 	%rd13, %rd12, %rd1;
	ld.global.u8 	%r118, [%rd13+0];
	mov.u32 	%r119, 1;
	set.eq.u32.u32 	%r120, %r118, %r119;
	neg.s32 	%r121, %r120;
	add.s32 	%r122, %r107, %r121;
	add.s32 	%r123, %r68, %r116;
	cvt.u64.s32 	%rd14, %r123;
	add.u64 	%rd15, %rd14, %rd1;
	ld.global.u8 	%r124, [%rd15+0];
	mov.u32 	%r125, 1;
	set.eq.u32.u32 	%r126, %r124, %r125;
	neg.s32 	%r127, %r126;
	add.s32 	%r128, %r122, %r127;
	add.s32 	%r129, %r54, %r116;
	cvt.u64.s32 	%rd16, %r129;
	add.u64 	%rd17, %rd16, %rd1;
	ld.global.u8 	%r130, [%rd17+0];
	mov.u32 	%r131, 1;
	set.eq.u32.u32 	%r132, %r130, %r131;
	neg.s32 	%r133, %r132;
	add.s32 	%r134, %r128, %r133;
	.loc	14	44	0
 //  41      }
 //  42  
 //  43      // apply the Game of Life rules to this cell
 //  44      next[y * WIDTH + x] = ((current[y * WIDTH + x] && num_neighbors==2) || num_neighbors==3);
	mul.lo.s32 	%r135, %r34, 1024;
	add.s32 	%r136, %r36, %r135;
	cvt.u64.s32 	%rd18, %r136;
	add.u64 	%rd19, %rd18, %rd1;
	ld.global.u8 	%r137, [%rd19+0];
	mov.u32 	%r138, 0;
	setp.eq.u32 	%p1, %r137, %r138;
	@%p1 bra 	$L_0_4098;
	mov.u32 	%r139, 2;
	setp.eq.s32 	%p2, %r134, %r139;
	@%p2 bra 	$L_0_3842;
$L_0_4098:
	mov.u32 	%r140, 3;
	setp.ne.s32 	%p3, %r134, %r140;
	@%p3 bra 	$L_0_3586;
$L_0_3842:
	mov.s16 	%rh5, 1;
	bra.uni 	$L_0_3330;
$L_0_3586:
	mov.s16 	%rh5, 0;
$L_0_3330:
	ld.param.u64 	%rd20, [__cudaparm_step_next];
	add.u64 	%rd21, %rd20, %rd18;
	st.global.u8 	[%rd21+0], %rh5;
	.loc	14	45	0
 //  45  }
	exit;
$LDWend_step:
	} // step

