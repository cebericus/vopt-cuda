	.version 1.4
	.target sm_10, map_f64_to_f32
	// compiled with /pkgs/nvidia-cuda/4.1/cuda/open64/lib//be
	// nvopencc 4.1 built on 2012-01-12

	//-----------------------------------------------------------
	// Compiling /tmp/tmpxft_00004eda_00000000-9_gol_opt0b.cpp3.i (/tmp/ccBI#.3arIqt)
	//-----------------------------------------------------------

	//-----------------------------------------------------------
	// Options:
	//-----------------------------------------------------------
	//  Target:ptx, ISA:sm_10, Endian:little, Pointer Size:64
	//  -O0	(Optimization level)
	//  -g0	(Debug level)
	//  -m2	(Report advisories)
	//-----------------------------------------------------------

	.file	1	"<command-line>"
	.file	2	"/tmp/tmpxft_00004eda_00000000-8_gol_opt0b.cudafe2.gpu"
	.file	3	"/usr/lib/x86_64-linux-gnu/gcc/x86_64-linux-gnu/4.5.2/include/stddef.h"
	.file	4	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/crt/device_runtime.h"
	.file	5	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/host_defines.h"
	.file	6	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/builtin_types.h"
	.file	7	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/device_types.h"
	.file	8	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/driver_types.h"
	.file	9	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/surface_types.h"
	.file	10	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/texture_types.h"
	.file	11	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/vector_types.h"
	.file	12	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/device_launch_parameters.h"
	.file	13	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/crt/storage_class.h"
	.file	14	"gol_opt0b.cu"
	.file	15	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/common_functions.h"
	.file	16	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/math_functions.h"
	.file	17	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/math_constants.h"
	.file	18	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/device_functions.h"
	.file	19	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/sm_11_atomic_functions.h"
	.file	20	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/sm_12_atomic_functions.h"
	.file	21	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/sm_13_double_functions.h"
	.file	22	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/sm_20_atomic_functions.h"
	.file	23	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/sm_20_intrinsics.h"
	.file	24	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/surface_functions.h"
	.file	25	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/texture_fetch_functions.h"
	.file	26	"/pkgs/nvidia-cuda/4.1/cuda/bin/../include/math_functions_dbl_ptx1.h"


	.entry step (
		.param .u64 __cudaparm_step_current,
		.param .u64 __cudaparm_step_next)
	{
	.reg .u32 %r<100>;
	.reg .u64 %rd<20>;
	.reg .pred %p<9>;
	.local .align 4 .b8 __cuda___cuda_local_var_16350_15_const_offsets_816[64];
	.loc	14	20	0
 //  16  const dim3 gridDim(8, 8, 1);
 //  17  const dim3 blocksDim(16, 16, 1); // 256 threads per block
 //  18  
 //  19  
 //  20  extern "C" __global__ void step (const unsigned char *current, unsigned char *next) {
$LDWbegin_step:
	.loc	14	22	0
 //  21      // coordinates of the cell we're currently evaluating
 //  22      int x = blockIdx.x * blockDim.x + threadIdx.x;
	cvt.u32.u16 	%r1, %tid.x;
	cvt.u32.u16 	%r2, %ctaid.x;
	cvt.u32.u16 	%r3, %ntid.x;
	mul.lo.u32 	%r4, %r2, %r3;
	add.u32 	%r5, %r1, %r4;
	mov.s32 	%r6, %r5;
	.loc	14	23	0
 //  23      int y = blockIdx.y * blockDim.y + threadIdx.y;
	cvt.u32.u16 	%r7, %tid.y;
	cvt.u32.u16 	%r8, %ctaid.y;
	cvt.u32.u16 	%r9, %ntid.y;
	mul.lo.u32 	%r10, %r8, %r9;
	add.u32 	%r11, %r7, %r10;
	mov.s32 	%r12, %r11;
	.loc	14	28	0
 //  24  
 //  25      // offset index, neighbor coordinates, alive neighbor count
 //  26      int i, nx, ny, num_neighbors;
 //  27      
 //  28      const int offsets[8][2] = {{-1, 1},{0, 1},{1, 1},
	mov.s32 	%r13, -1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+0], %r13;
	mov.s32 	%r14, 1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+4], %r14;
	mov.s32 	%r15, 0;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+8], %r15;
	mov.s32 	%r16, 1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+12], %r16;
	mov.s32 	%r17, 1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+16], %r17;
	mov.s32 	%r18, 1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+20], %r18;
	mov.s32 	%r19, -1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+24], %r19;
	mov.s32 	%r20, 0;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+28], %r20;
	mov.s32 	%r21, 1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+32], %r21;
	mov.s32 	%r22, 0;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+36], %r22;
	mov.s32 	%r23, -1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+40], %r23;
	mov.s32 	%r24, -1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+44], %r24;
	mov.s32 	%r25, 0;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+48], %r25;
	mov.s32 	%r26, -1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+52], %r26;
	mov.s32 	%r27, 1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+56], %r27;
	mov.s32 	%r28, -1;
	st.local.s32 	[__cuda___cuda_local_var_16350_15_const_offsets_816+60], %r28;
	.loc	14	33	0
 //  29                             {-1, 0},       {1, 0},
 //  30                             {-1,-1},{0,-1},{1,-1}};
 //  31  
 //  32      // count this cell's alive neighbors
 //  33      num_neighbors = 0;
	mov.s32 	%r29, 0;
	mov.s32 	%r30, %r29;
	.loc	14	34	0
 //  34      for (i=0; i<8; i++) {
	mov.s32 	%r31, 0;
	mov.s32 	%r32, %r31;
	mov.s32 	%r33, %r32;
	mov.u32 	%r34, 7;
	setp.gt.s32 	%p1, %r33, %r34;
	@%p1 bra 	$L_0_3074;
$L_0_2818:
	.loc	14	38	0
 //  35          // To make the board torroidal, we use modular arithmetic to
 //  36          // wrap neighbor coordinates around to the other side of the
 //  37          // board if they fall off.
 //  38          nx = (x + offsets[i][0] + WIDTH) % WIDTH;
	mov.u64 	%rd1, __cuda___cuda_local_var_16350_15_const_offsets_816;
	mov.s32 	%r35, %r32;
	cvt.s64.s32 	%rd2, %r35;
	mul.wide.s32 	%rd3, %r35, 8;
	add.u64 	%rd4, %rd1, %rd3;
	ld.local.s32 	%r36, [%rd4+0];
	mov.s32 	%r37, %r6;
	add.s32 	%r38, %r36, %r37;
	add.s32 	%r39, %r38, 1024;
	shr.s32 	%r40, %r39, 31;
	mov.s32 	%r41, 1023;
	and.b32 	%r42, %r40, %r41;
	add.s32 	%r43, %r42, %r39;
	shr.s32 	%r44, %r43, 10;
	mul.lo.s32 	%r45, %r44, 1024;
	sub.s32 	%r46, %r39, %r45;
	mov.s32 	%r47, %r46;
	.loc	14	39	0
 //  39          ny = (y + offsets[i][1] + HEIGHT) % HEIGHT;
	mov.u64 	%rd5, __cuda___cuda_local_var_16350_15_const_offsets_816;
	mov.s32 	%r48, %r32;
	cvt.s64.s32 	%rd6, %r48;
	mul.wide.s32 	%rd7, %r48, 8;
	add.u64 	%rd8, %rd5, %rd7;
	add.u64 	%rd9, %rd8, 4;
	ld.local.s32 	%r49, [%rd9+0];
	mov.s32 	%r50, %r12;
	add.s32 	%r51, %r49, %r50;
	add.s32 	%r52, %r51, 1024;
	shr.s32 	%r53, %r52, 31;
	mov.s32 	%r54, 1023;
	and.b32 	%r55, %r53, %r54;
	add.s32 	%r56, %r55, %r52;
	shr.s32 	%r57, %r56, 10;
	mul.lo.s32 	%r58, %r57, 1024;
	sub.s32 	%r59, %r52, %r58;
	mov.s32 	%r60, %r59;
	.loc	14	40	0
 //  40          num_neighbors += current[ny * WIDTH + nx]==1;
	mov.s32 	%r61, %r47;
	mov.s32 	%r62, %r60;
	mul.lo.s32 	%r63, %r62, 1024;
	add.s32 	%r64, %r61, %r63;
	cvt.u64.s32 	%rd10, %r64;
	ld.param.u64 	%rd11, [__cudaparm_step_current];
	add.u64 	%rd12, %rd10, %rd11;
	ld.global.u8 	%r65, [%rd12+0];
	mov.u32 	%r66, 1;
	setp.ne.u32 	%p2, %r65, %r66;
	@%p2 bra 	$L_0_3586;
	mov.s32 	%r67, %r30;
	add.s32 	%r68, %r67, 1;
	bra.uni 	$L_0_3330;
$L_0_3586:
	mov.s32 	%r68, %r30;
$L_0_3330:
	mov.s32 	%r30, %r68;
	.loc	14	34	0
	mov.s32 	%r69, %r32;
	add.s32 	%r70, %r69, 1;
	mov.s32 	%r32, %r70;
	mov.s32 	%r71, %r32;
	mov.u32 	%r72, 7;
	setp.le.s32 	%p3, %r71, %r72;
	@%p3 bra 	$L_0_2818;
$L_0_3074:
	.loc	14	44	0
 //  41      }
 //  42  
 //  43      // apply the Game of Life rules to this cell
 //  44      next[y * WIDTH + x] = ((current[y * WIDTH + x] && num_neighbors==2) || num_neighbors==3);
	mov.s32 	%r73, %r6;
	mov.s32 	%r74, %r12;
	mul.lo.s32 	%r75, %r74, 1024;
	add.s32 	%r76, %r73, %r75;
	cvt.u64.s32 	%rd13, %r76;
	ld.param.u64 	%rd14, [__cudaparm_step_current];
	add.u64 	%rd15, %rd13, %rd14;
	ld.global.u8 	%r77, [%rd15+0];
	mov.u32 	%r78, 0;
	set.ne.u32.u32 	%r79, %r77, %r78;
	neg.s32 	%r80, %r79;
	mov.u32 	%r81, 0;
	setp.eq.s32 	%p4, %r80, %r81;
	@%p4 bra 	$L_0_4866;
	mov.s32 	%r82, %r30;
	mov.s32 	%r83, 2;
	set.eq.u32.s32 	%r84, %r82, %r83;
	neg.s32 	%r85, %r84;
	mov.u32 	%r86, 0;
	setp.eq.s32 	%p5, %r85, %r86;
	@%p5 bra 	$L_0_4866;
$L_0_5122:
	mov.s32 	%r87, 1;
	bra.uni 	$L_0_4610;
$L_0_4866:
	mov.s32 	%r87, 0;
$L_0_4610:
	mov.u32 	%r88, 0;
	setp.ne.s32 	%p6, %r87, %r88;
	@%p6 bra 	$L_0_4354;
	mov.s32 	%r89, %r30;
	mov.s32 	%r90, 3;
	set.eq.u32.s32 	%r91, %r89, %r90;
	neg.s32 	%r92, %r91;
	mov.u32 	%r93, 0;
	setp.eq.s32 	%p7, %r92, %r93;
	@%p7 bra 	$L_0_4098;
$L_0_4354:
	mov.s32 	%r94, 1;
	bra.uni 	$L_0_3842;
$L_0_4098:
	mov.s32 	%r94, 0;
$L_0_3842:
	mov.s32 	%r95, %r6;
	mov.s32 	%r96, %r12;
	mul.lo.s32 	%r97, %r96, 1024;
	add.s32 	%r98, %r95, %r97;
	cvt.u64.s32 	%rd16, %r98;
	ld.param.u64 	%rd17, [__cudaparm_step_next];
	add.u64 	%rd18, %rd16, %rd17;
	st.global.u8 	[%rd18+0], %r94;
	.loc	14	45	0
 //  45  }
	exit;
$LDWend_step:
	} // step

