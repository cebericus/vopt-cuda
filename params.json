{"name":"Vopt-cuda","body":"<b>Visual Occupancy and Performance Tool for CUDA</b> \r\n\r\nCole S. Nelson, Ph.D. (2012)  \r\n\r\n<b>Abstract:</b> \r\nThe Compute Unified Device Architecture (CUDA) is a combined hardware and software \r\nmodel for general-purpose graphics processing unit (GP-GPU) parallel computing. Successful \r\nutilization of GP-GPU computing requires an understanding of the interaction \r\nbetween the underlying platform-specific hardware and multiple levels of software \r\nfunctionality.  To aid the programmer, numerous detailed reference materials and \r\ntools are provided by the manufacturer.  However, integrating the multiplicity of \r\nresources can prove to be a daunting task for the CUDA programmer.  \r\n\r\nAn important criterion for correct, efficient parallel programs in CUDA is occupancy. The \r\ntransfer of program instructions and data from the host device to the CUDA-enabled \r\ndevice is relatively slow and incurs a large overhead in time and physical resources. \r\nFor this reason, it is desirable to utilize the CUDA-enabled hardware to a maximal extent \r\nand leverage the benefits of parallel execution.  The first step is to examine the \r\n“occupancy”, meaning compute-cycle and resource utilization.  To analyze device occupancy \r\nthere are three basic, yet separate, tools that the CUDA programmer has available.  These are deviceQuery which enumerates the CUDA model for the underlying hardware \r\nplatform, the Occupancy Calculator which is a spreadsheet based form that requires the \r\noutput of deviceQuery and the command-line profiler log file which provides run-time \r\ninformation.  A programmer is faced with transitioning between these three separate \r\nresources and some of the 30 or so written reference materials in order to analyze a \r\ndeveloping CUDA program.\r\n\r\nTherefore, I have designed and implemented the Visual Occupancy and Performance Tool \r\n(VOPT) for CUDA.  VOPT combines the basic \r\nCUDA resources: deviceQuery, Occupancy Calculator and Command-Line Profiler log files \r\ninto a unified, visual reference and analysis tool.  This removes several practical \r\nobstacles for the CUDA programmer and facilitates the analysis and optimization of\r\n CUDA software.\r\n\r\n<b>Notes:</b>\r\n\r\nRequires SWT. \r\n\r\nhttp://www.eclipse.org/swt/\r\n\r\nRequires JCUDA.\r\n\r\nhttp://www.jcuda.org\r\n\r\nCurrently using swt 3.7.2, jcuda 0.4.1 and OpenJDK 1.7.\r\n","tagline":"Visual Occupancy and Performance Tool for CUDA.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}